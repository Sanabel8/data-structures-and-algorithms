/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.junit.Test;

import java.util.ArrayList;
import java.util.List;
import static org.junit.Assert.*;

public class LibraryTest {
  @Test
  public void testAddVertexTograph1() {
    Graph graph = new Graph();

    graph.addVertex("sanabel");
    graph.addVertex("ahmad");
    graph.addVertex("tareq");
    graph.addVertex("yasmeen");
    graph.addVertex("kamleh");
    graph.addVertex("jamal");

    assertEquals("{Vertex{value='tareq'}=[], Vertex{value='jamal'}=[], Vertex{value='yasmeen'}=[], Vertex{value='kamleh'}=[], Vertex{value='sanabel'}=[], Vertex{value='ahmad'}=[]}", graph.getAdjVertices().toString());
  }

  @Test
  public void testEmptygraph() {
    Graph graph = new Graph();
    assertEquals("{}", graph.getAdjVertices().toString());
  }

  @Test
  public void testSizeOfgraph3() {
    Graph graph = new Graph();
    graph.addVertex("sanabel");
    graph.addVertex("ahmad");
    graph.addVertex("tareq");
    graph.addVertex("yasmeen");
    graph.addVertex("kamleh");
    graph.addVertex("jamal");
    assertEquals(6, graph.size());

  }

  @Test
  public void testAddEdgeTograph4() {
    Graph graph = new Graph();

    graph.addVertex("sanabel");
    graph.addVertex("ahmad");
    graph.addVertex("tareq");
    graph.addVertex("yasmeen");
    graph.addVertex("kamleh");
    graph.addVertex("jamal");

    graph.addEdge("jamal", "kamleh");
    graph.addEdge("kamleh", "sanabel");
    graph.addEdge("sanabel", "yasmeen");

    assertEquals("{Vertex{value='tareq'}=[], Vertex{value='jamal'}=[Vertex{value='kamleh'}], Vertex{value='yasmeen'}=[Vertex{value='sanabel'}], Vertex{value='kamleh'}=[Vertex{value='jamal'}, Vertex{value='sanabel'}], Vertex{value='sanabel'}=[Vertex{value='kamleh'}, Vertex{value='yasmeen'}], Vertex{value='ahmad'}=[]}", graph.getAdjVertices().toString());


  }

  @Test
  public void testGetNighborsgraph5() {
    Graph graph = new Graph();

    graph.addVertex("sanabel");
    graph.addVertex("ahmad");
    graph.addVertex("tareq");
    graph.addVertex("yasmeen");
    graph.addVertex("kamleh");
    graph.addVertex("jamal");

    graph.addEdge("jamal", "kamleh");
    graph.addEdge("kamleh", "sanabel");
    graph.addEdge("sanabel", "yasmeen");

    assertEquals("[Vertex{value='kamleh'}, Vertex{value='yasmeen'}]", graph.getNeighborsForVertex("sanabel").toString());
 }

  ////////////////////////cc36//////////////////////////////
  @Test
  public void testgraphBreadthFirst() {
    Graph graph = new Graph();

    graph.addVertex("Pandora");
    graph.addVertex("Arendelle");
    graph.addVertex("Metroville");
    graph.addVertex("Monstroplolis");
    graph.addVertex("Narnia");
    graph.addVertex("Naboo");

    graph.addEdge("Pandora", "Arendelle");
    graph.addEdge("Arendelle", "Metroville");
    graph.addEdge("Arendelle", "Monstroplolis");
    graph.addEdge("Metroville", "Narnia");
    graph.addEdge("Monstroplolis", "Metroville");
    graph.addEdge("Naboo", "Narnia");
    graph.addEdge("Naboo", "Metroville");
    graph.addEdge("Naboo", "Monstroplolis");

    assertEquals("[Pandora, Arendelle, Metroville, Monstroplolis, Narnia, Naboo]", graph.graphBreadthFirst(graph, "Pandora").toString());
  }

  @Test
  public void testgraphBreadthFirst2() {
    Graph graph = new Graph();

    graph.addVertex("Pandora");
    graph.addVertex("Arendelle");
    graph.addVertex("Metroville");
    graph.addVertex("Monstroplolis");
    graph.addVertex("Narnia");
    graph.addVertex("Naboo");

    graph.addEdge("Pandora", "Arendelle");
    graph.addEdge("Arendelle", "Metroville");
    graph.addEdge("Arendelle", "Monstroplolis");
    graph.addEdge("Metroville", "Narnia");
//    graph.addEdge("Monstroplolis", "Metroville");
//    graph.addEdge("Naboo", "Narnia");
//    graph.addEdge("Naboo", "Metroville");
//    graph.addEdge("Naboo", "Monstroplolis");

    assertEquals("[Pandora, Arendelle, Metroville, Monstroplolis, Narnia]", graph.graphBreadthFirst(graph, "Pandora").toString());
  }

  ////////////////////////cc37//////////////////////////////
    @Test
  public void testgraphBusinessTrip() {
    Graph graph3 = new Graph();

    graph3.addVertex("Pandora");
    graph3.addVertex("Arendelle");
    graph3.addVertex("Metroville");
    graph3.addVertex("Monstroplolis");
    graph3.addVertex("Narnia");
    graph3.addVertex("Naboo");

    graph3.addEdgeWithWeight("Pandora", "Arendelle",150);
    graph3.addEdgeWithWeight("Arendelle", "Metroville",82);
    graph3.addEdgeWithWeight("Arendelle", "Monstroplolis",42);
    graph3.addEdgeWithWeight("Metroville", "Narnia",37);
    graph3.addEdgeWithWeight("Arendelle", "Metroville",99);
    graph3.addEdgeWithWeight("Monstroplolis", "Metroville",105);
    graph3.addEdgeWithWeight("Naboo", "Narnia",250);
    graph3.addEdgeWithWeight("Naboo", "Metroville",26);
    graph3.addEdgeWithWeight("Naboo", "Monstroplolis",73);

    List<String> listOfTrips2 = new ArrayList<>();
    listOfTrips2.add("Naboo");
    listOfTrips2.add("Narnia");
    listOfTrips2.add("Metroville");
    listOfTrips2.add("Monstroplolis");

      assertEquals("True,$392",graph3.businessTrip(graph3,listOfTrips2).toString());
}

  @Test public void testgraphBusinessTrip2(){
    Graph graph2 = new Graph();

    graph2.addVertex("Pandora");
    graph2.addVertex("Arendelle");
    graph2.addVertex("Metroville");
    graph2.addVertex("Monstroplolis");
    graph2.addVertex("Naboo");

    graph2.addEdgeWithWeight("Pandora", "Arendelle", 150);
    graph2.addEdgeWithWeight("Arendelle", "Metroville",99);
    graph2.addEdgeWithWeight("Arendelle", "Monstroplolis",42);
    graph2.addEdgeWithWeight("Naboo", "Monstroplolis",42);

    List<String> listOfTrips2 = new ArrayList<>();
    listOfTrips2.add("Arendelle");
    listOfTrips2.add("Monstroplolis");

    assertEquals("True,$42", graph2.businessTrip(graph2,listOfTrips2).toString());
  }
  @Test public void testgraphBusinessTrip3(){
    Graph graph2 = new Graph();

    graph2.addVertex("Pandora");
    graph2.addVertex("Arendelle");
    graph2.addVertex("Metroville");
    graph2.addVertex("Monstroplolis");
    graph2.addVertex("Naboo");

    graph2.addEdgeWithWeight("Pandora", "Arendelle", 150);
    graph2.addEdgeWithWeight("Arendelle", "Metroville",99);
    graph2.addEdgeWithWeight("Arendelle", "Monstroplolis",42);
    graph2.addEdgeWithWeight("Naboo", "Monstroplolis",42);

    List<String> cities1 = new ArrayList<>();
    cities1.add("Arendelle");
    cities1.add("Narnia");
    assertEquals("False, $0", graph2.businessTrip(graph2,cities1).toString());
  }
        ////////////////////////cc38//////////////////////////////

  @Test public void testgraphDepthFirst1(){
    Graph graph4 = new Graph();

    graph4.addVertex("A");
    graph4.addVertex("B");
    graph4.addVertex("C");
    graph4.addVertex("D");
    graph4.addVertex("E");
    graph4.addVertex("F");
    graph4.addVertex("G");
    graph4.addVertex("H");

    graph4.addEdge("A", "B");
    graph4.addEdge("A", "D");
    graph4.addEdge("B", "C");
    graph4.addEdge("B", "D");
    graph4.addEdge("C", "G");
    graph4.addEdge("D", "F");
    graph4.addEdge("D", "H");
    graph4.addEdge("D", "E");
    graph4.addEdge("F", "H");

    assertEquals("[A, D, E, H, F, B, C, G]", graph4.depthFirst(graph4, "A").toString());

  }
}
