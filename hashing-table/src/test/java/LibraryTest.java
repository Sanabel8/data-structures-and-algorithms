/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.*;

public class LibraryTest {
  @Test
  public void testHash() {
    HashTable<String, Integer> books = new HashTable<>();
    books.add("The Great Gatsby", 2);
    books.add("Passage to India", 5);
    books.add("Beloved", 7);
    books.add("To Kill a Mockingbird", 9);

    assertEquals(4, books.getSize());

  }

  @Test
  public void testHash2() {
    HashTable<String, Integer> books = new HashTable<>();
    books.add("The Great Gatsby", 2);
    books.add("Passage to India", 5);
    books.add("Beloved", 7);
    books.add("To Kill a Mockingbird", 9);

    assertFalse(books.isEmpty());
  }

  @Test
  public void testHash3() {
    HashTable<String, Integer> books = new HashTable<>();
    assertTrue(books.isEmpty());
  }

  @Test
  public void testHash4() {
    HashTable<String, Integer> books = new HashTable<>();
    books.add("The Great Gatsby", 2);
    books.add("Passage to India", 5);
    books.add("Beloved", 7);
    books.add("To Kill a Mockingbird", 9);

    assertTrue(books.contains("Beloved"));

  }

  @Test
  public void testHash5() {
    HashTable<String, Integer> books = new HashTable<>();
    books.add("The Great Gatsby", 2);
    books.add("Passage to India", 5);
    books.add("Beloved", 7);
    books.add("To Kill a Mockingbird", 9);

    assertFalse(books.contains("sanabel"));

  }

  ////////cc32/////////

  @Test
  public void binaryTreeTest1() {

    HashTable<Integer, Integer> bt = new HashTable<Integer, Integer>();
    BinaryTrees bt1 = new BinaryTrees();
    BinaryTrees bt2 = new BinaryTrees();

    bt1.setRoot(new Node(2));
    bt1.getRoot().setLeft(new Node(10));
    bt1.getRoot().setRight(new Node(11));
    bt1.getRoot().getRight().setLeft(new Node(4));
    bt1.getRoot().getRight().setRight(new Node(6));

    bt2.setRoot(new Node(6));
    bt2.getRoot().setLeft(new Node(10));
    bt2.getRoot().setRight(new Node(4));
    bt2.getRoot().getRight().setLeft(new Node(2));
    bt2.getRoot().getRight().setRight(new Node(33));

    assertEquals("[6, 10, 4, 2]", bt.insertionMethod(bt1, bt2).toString());

  }

  @Test
  public void noCommenValue() {

    HashTable<Integer, Integer> bt = new HashTable<Integer, Integer>();
    BinaryTrees bt1 = new BinaryTrees();
    BinaryTrees bt2 = new BinaryTrees();

    bt1.setRoot(new Node(11));
    bt1.getRoot().setLeft(new Node(111));
    bt1.getRoot().setRight(new Node(1111));
    bt1.getRoot().getRight().setLeft(new Node(11111));
    bt1.getRoot().getRight().setRight(new Node(0));

    bt2.setRoot(new Node(22));
    bt2.getRoot().setLeft(new Node(222));
    bt2.getRoot().setRight(new Node(2222));
    bt2.getRoot().getRight().setLeft(new Node(22222));
    bt2.getRoot().getRight().setRight(new Node(222222));

    assertEquals("[]", bt.insertionMethod(bt1, bt2).toString());

  }
}
