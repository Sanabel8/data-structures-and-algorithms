/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package code.challenge5;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.assertEquals;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }
  @Test public void testInsertemptyLinked() {
    LinkedList test = new LinkedList();
    assertEquals("NULL", test.tostring());
  }
  @Test
  public void testGetHead() {
    LinkedList list = new LinkedList();
    list.insert(4);
    list.insert(44);
    list.insert(444);
    list.insert(4444);
    assertEquals("4", list.getHead());
    }

  @Test public void testInsertMultipleNodes() {
    LinkedList test = new LinkedList();
    test.insert(5);
    test.insert(6);
    test.insert(7);
    assertEquals("{5} ->{6} ->{7} ->NULL", test.tostring());
  }
  @Test  void testIncludes(){
    LinkedList test = new LinkedList();
    test.insert(14);
    test.insert(2);
    test.insert(21);
    int data1 = 8;
    int data2 = 14;
    assertEquals(false, test.includes(data1));
    assertEquals(true, test.includes(data2));
  }

  @Test  void testTostring(){
    LinkedList test = new LinkedList();
    test.insert(2);
    test.insert(22);
    test.insert(222);
    assertEquals("{2} ->{22} ->{222} ->NULL" , test.tostring());

  }
  // for code challenge 6
  @Test void testAppendedNodeInEnd(){
    LinkedList test1 = new LinkedList();
    test1.append(2);
    test1.append(22);
    test1.append(222);
    test1.append(5);
    assertEquals("{2} ->{22} ->{222} ->{5} ->NULL",test1.tostring());
  }
@Test void testAppendedMultipleAtEnd(){
  LinkedList test1 = new LinkedList();
  test1.append(2);
  test1.append(22);
  test1.append(222);
  test1.append(5);
  test1.append(6);
  test1.append(7);
  assertEquals("{2} ->{22} ->{222} ->{5} ->{6} ->{7} ->NULL",test1.tostring());
}
  @Test void testInsertBefore(){
    LinkedList test1 = new LinkedList();
    test1.insert(2);
    test1.insert(22);
    test1.insert(222);
    test1.insert(2222);
    test1.insertBefore(22,1);
    assertEquals("{2} ->{1} ->{22} ->{222} ->{2222} ->NULL",test1.tostring());
  }
  @Test void testInsertBeforeMiddle(){
    LinkedList test1 = new LinkedList();
    test1.insert(2);
    test1.insert(22);
    test1.insert(222);
    test1.insertBefore(22,1);
    assertEquals("{2} ->{1} ->{22} ->{222} ->NULL",test1.tostring());
  }
  @Test void testInsertAfter(){
    LinkedList test1 = new LinkedList();
    test1.insert(2);
    test1.insert(22);
    test1.insert(222);
    test1.insert(2222);
    test1.insertAfter(22,1);
    assertEquals("{2} ->{22} ->{1} ->{222} ->{2222} ->NULL",test1.tostring());
  }
  @Test void testInsertAfterMiddleNode(){
    LinkedList test1 = new LinkedList();
    test1.insert(2);
    test1.insert(22);
    test1.insert(222);
    test1.insertAfter(22,1);
    assertEquals("{2} ->{22} ->{1} ->{222} ->NULL",test1.tostring());
  }
  @Test void testInsertAfterLastNode(){
    LinkedList test1 = new LinkedList();
    test1.insert(2);
    test1.insert(22);
    test1.insert(222);
    test1.insert(2222);
    test1.insertAfter(2222,1);
    assertEquals("{2} ->{22} ->{222} ->{2222} ->{1} ->NULL",test1.tostring());
  }

  // for code challenge 7
  @Test public void testKLocationHappyPath(){
    LinkedList test1 = new LinkedList();
    test1.insert(2);
    test1.insert(22);
    test1.insert(222);
    test1.insert(2222);
    test1.insert(22222);
    assertEquals("k[3] = 22",test1.kLocation(3));
  }
  @Test public void testKLocationSize1(){
    LinkedList test1 = new LinkedList();
    test1.insert(2);
    test1.insert(22);
    test1.insert(222);
    assertEquals("k[1] = 22",test1.kLocation(1));
  }
  @Test public void testKLocationNotPositive(){
    LinkedList test1 = new LinkedList();
    test1.insert(2);
    test1.insert(22);
    test1.insert(222);
    assertEquals("Exception",test1.kLocation(-2));
  }
  @Test public void testKLocationSameLenght(){
    LinkedList test1 = new LinkedList();
    test1.insert(2);
    test1.insert(22);
    test1.insert(222);
    assertEquals("k[2] = 2",test1.kLocation(2));
  }
  @Test public void testKLocationoverSize(){
    LinkedList test1 = new LinkedList();
    test1.insert(2);
    test1.insert(22);
    test1.insert(222);
    assertEquals("Exception",test1.kLocation(5));
  }
//  @Test public void testZipList(){
//    LinkedList test1 = new LinkedList();
//    LinkedList test2 = new LinkedList();
//    LinkedList ls3=App.zipLists(test1,test2);
//
//    test1.insert(2);
//    test1.insert(1);
//    test2.insert(5);
//    test2.insert(7);
//    test2.insert(6);
//    assertEquals("eee",ls3.tostring());
//    System.out.println(ls3.tostring());
//
//  }
@Test
public void testLinkedList_ziplist() {
  LinkedList list = new LinkedList();
  list.append(1);
  list.append(2);
  list.append(3);

  LinkedList list2 = new LinkedList();
  list2.append(4);
  list2.append(5);
  list2.append(6);

  LinkedList mergeList = new LinkedList();
  mergeList.head=mergeList.zipLists(list,list2);
  String result = mergeList.tostring();
  assertEquals("{1} ->{4} ->{2} ->{5} ->{3} ->{6} ->NULL",result.toString());
}
}


