/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package trees;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
      System.out.println(new App().getGreeting());


      BinaryTree binaryTree = new BinaryTree();
//      System.out.println("before " + binaryTree);
//      binaryTree.setRoot(new Node(1));
//      binaryTree.getRoot().setLeft(new Node(2));
//      binaryTree.getRoot().getLeft().setLeft(new Node(4));
//      binaryTree.getRoot().getLeft().setRight(new Node(5));
//      binaryTree.getRoot().getLeft().getRight().setLeft(new Node(6));
//      binaryTree.getRoot().getLeft().getRight().setRight(new Node(7));
//      binaryTree.getRoot().setRight(new Node(3));
//      binaryTree.getRoot().getRight().setRight(new Node(8));
////        binaryTree.getRoot().getRight().getRight().setRight(new Node(10));
//      binaryTree.getRoot().getRight().getRight().setLeft(new Node(9));
      BinarySearchTree<Integer> binarySearchTree = new BinarySearchTree<Integer>();
      Node<Integer> root = new Node<>(8);
      Node<Integer> n1 = new Node<>(2);
      Node<Integer> n2 = new Node<>(11);
      Node<Integer> n3 = new Node<>(7);
      Node<Integer> n4 = new Node<>(5);
      Node<Integer> n5 = new Node<>(9);
      Node<Integer> n6 = new Node<>(4);

      binarySearchTree.root = root;
      binarySearchTree.root.left = n1;
      binarySearchTree.root.right = n2;
      binarySearchTree.root.left.left = n3;
      binarySearchTree.root.left.right = n4;
      binarySearchTree.root.right.left = n5;
      binarySearchTree.root.right.right = n6;

      binarySearchTree.add(1);
      binarySearchTree.add(3);
      binarySearchTree.add(6);
      binarySearchTree.add(12);
      binarySearchTree.add(18);
//      binarySearchTree.contains(5);
//      binarySearchTree.contains(15);
//      binarySearchTree.contains(25);
//      binarySearchTree.contains(17);
//      binarySearchTree.contains(6);

      System.out.println(binarySearchTree.inOrder(root));
      System.out.println("-----------");
      System.out.println(binarySearchTree.contains(5));
      System.out.println(binarySearchTree.contains(17));
      System.out.println(binarySearchTree.contains(12));
      System.out.println(binarySearchTree.contains(4));
    }

}
