/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;
import static org.junit.Assert.*;

public class LibraryTest {
   @Test
  public void testAddVertexTograph1(){
     Graph graph = new Graph();

     graph.addVertex("sanabel");
     graph.addVertex("ahmad");
     graph.addVertex("tareq");
     graph.addVertex("yasmeen");
     graph.addVertex("kamleh");
     graph.addVertex("jamal");

     assertEquals("{Vertex{value='tareq'}=[], Vertex{value='jamal'}=[], Vertex{value='yasmeen'}=[], Vertex{value='kamleh'}=[], Vertex{value='sanabel'}=[], Vertex{value='ahmad'}=[]}",graph.getAdjVertices().toString());
   }
   @Test
  public void testEmptygraph(){
     Graph graph = new Graph();
    assertEquals("{}",graph.getAdjVertices().toString());
  }
  @Test
  public void testSizeOfgraph3(){
    Graph graph = new Graph();
    graph.addVertex("sanabel");
    graph.addVertex("ahmad");
    graph.addVertex("tareq");
    graph.addVertex("yasmeen");
    graph.addVertex("kamleh");
    graph.addVertex("jamal");
    assertEquals(6,graph.size());

  }
  @Test
  public void testAddEdgeTograph4(){
    Graph graph = new Graph();

    graph.addVertex("sanabel");
    graph.addVertex("ahmad");
    graph.addVertex("tareq");
    graph.addVertex("yasmeen");
    graph.addVertex("kamleh");
    graph.addVertex("jamal");

    graph.addEdge("jamal", "kamleh");
    graph.addEdge("kamleh", "sanabel");
    graph.addEdge("sanabel", "yasmeen");

    assertEquals("{Vertex{value='tareq'}=[], Vertex{value='jamal'}=[Vertex{value='kamleh'}], Vertex{value='yasmeen'}=[Vertex{value='sanabel'}], Vertex{value='kamleh'}=[Vertex{value='jamal'}, Vertex{value='sanabel'}], Vertex{value='sanabel'}=[Vertex{value='kamleh'}, Vertex{value='yasmeen'}], Vertex{value='ahmad'}=[]}",graph.getAdjVertices().toString());


  }
  @Test
  public void testGetNighborsgraph5(){
    Graph graph = new Graph();

    graph.addVertex("sanabel");
    graph.addVertex("ahmad");
    graph.addVertex("tareq");
    graph.addVertex("yasmeen");
    graph.addVertex("kamleh");
    graph.addVertex("jamal");

    graph.addEdge("jamal", "kamleh");
    graph.addEdge("kamleh", "sanabel");
    graph.addEdge("sanabel", "yasmeen");

    assertEquals("[Vertex{value='kamleh'}, Vertex{value='yasmeen'}]",graph.getNeighborsForVertex("sanabel").toString());
  }

  ////////////////////////cc36//////////////////////////////
  @Test
  public void testgraphBreadthFirst(){
    Graph graph = new Graph();

    graph.addVertex("Pandora");
    graph.addVertex("Arendelle");
    graph.addVertex("Metroville");
    graph.addVertex("Monstroplolis");
    graph.addVertex("Narnia");
    graph.addVertex("Naboo");

    graph.addEdge("Pandora", "Arendelle");
    graph.addEdge("Arendelle", "Metroville");
    graph.addEdge("Arendelle", "Monstroplolis");
    graph.addEdge("Metroville", "Narnia");
    graph.addEdge("Monstroplolis", "Metroville");
    graph.addEdge("Naboo", "Narnia");
    graph.addEdge("Naboo", "Metroville");
    graph.addEdge("Naboo", "Monstroplolis");

    assertEquals("[Pandora, Arendelle, Metroville, Monstroplolis, Narnia, Naboo]",graph.graphBreadthFirst(graph,"Pandora").toString());
  }

  @Test
  public void testgraphBreadthFirst2(){
    Graph graph = new Graph();

    graph.addVertex("Pandora");
    graph.addVertex("Arendelle");
    graph.addVertex("Metroville");
    graph.addVertex("Monstroplolis");
    graph.addVertex("Narnia");
    graph.addVertex("Naboo");

    graph.addEdge("Pandora", "Arendelle");
    graph.addEdge("Arendelle", "Metroville");
    graph.addEdge("Arendelle", "Monstroplolis");
    graph.addEdge("Metroville", "Narnia");
//    graph.addEdge("Monstroplolis", "Metroville");
//    graph.addEdge("Naboo", "Narnia");
//    graph.addEdge("Naboo", "Metroville");
//    graph.addEdge("Naboo", "Monstroplolis");

    assertEquals("[Pandora, Arendelle, Metroville, Monstroplolis, Narnia]",graph.graphBreadthFirst(graph,"Pandora").toString());
  }

}
