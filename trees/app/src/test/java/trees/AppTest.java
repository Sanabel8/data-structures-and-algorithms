/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package trees;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
  @Test
  void appHasAGreeting() {
    App classUnderTest = new App();
    assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
  }

  @Test
  void instantiateEmptyTree() {
    BinaryTree<Integer> test = new BinaryTree<>();
    assertEquals(null, test.root);
  }

  @Test
  void instantiateSingleRootTree() {
    BinaryTree<Integer> test = new BinaryTree<>();
    Node<Integer> root = new Node<Integer>(1);
    test.root = root;
    assertNotNull(test.root);
  }

  @Test
  void instantiateAddLeftRightchildTree() {
    BinaryTree<Integer> test = new BinaryTree<>();
    Node<Integer> root = new Node<Integer>(1);
    Node<Integer> left = new Node<Integer>(8);
    Node<Integer> right = new Node<Integer>(7);
    test.root = root ;
    test.root.left = left ;
    test.root.right = right ;
    assertEquals("8=>1=>7=>",test.inOrder(test.root));
  }

  @Test
  void instantiatepreorderTree() {
    BinaryTree<Integer> test = new BinaryTree<>();
    Node<Integer> root = new Node<Integer>(1);
    Node<Integer> left = new Node<Integer>(8);
    Node<Integer> right = new Node<Integer>(7);
    Node<Integer> Lright = new Node<Integer>(11);
    Node<Integer> Rleft = new Node<Integer>(22);
    test.root = root ;
    test.root.left = left ;
    test.root.right = right ;
    test.root.left.right = Lright ;
    test.root.right.left = Rleft ;

    assertEquals("1 => 8 => 11 => 7 => 22 => ",test.preOrder(test.root));
  }

  @Test
  void instantiateInorderTree() {
    BinaryTree<Integer> test = new BinaryTree<>();
    Node<Integer> root = new Node<Integer>(1);
    Node<Integer> left = new Node<Integer>(8);
    Node<Integer> right = new Node<Integer>(7);
    Node<Integer> Lright = new Node<Integer>(11);
    Node<Integer> Rleft = new Node<Integer>(22);
    test.root = root ;
    test.root.left = left ;
    test.root.right = right ;
    test.root.left.right = Lright ;
    test.root.right.left = Rleft ;

    assertEquals("8=>11=>1=>22=>7=>",test.inOrder(test.root));
  }


  @Test
  void instantiatePostOrderTree() {
    BinaryTree<Integer> test = new BinaryTree<>();
    Node<Integer> root = new Node<Integer>(1);
    Node<Integer> left = new Node<Integer>(8);
    Node<Integer> right = new Node<Integer>(7);
    Node<Integer> Lright = new Node<Integer>(11);
    Node<Integer> Rleft = new Node<Integer>(22);
    test.root = root ;
    test.root.left = left ;
    test.root.right = right ;
    test.root.left.right = Lright ;
    test.root.right.left = Rleft ;

    assertEquals("11 => 8 => 22 => 7 => 1 => ",test.postOrder(test.root));
  }
  @Test void treeMax(){
    BinaryTree<Integer> test = new BinaryTree<>();
    Node<Integer> root = new Node<Integer>(1);
    Node<Integer> left = new Node<Integer>(8);
    Node<Integer> right = new Node<Integer>(7);
    Node<Integer> Lright = new Node<Integer>(11);
    Node<Integer> Rleft = new Node<Integer>(22);
    test.root = root ;
    test.root.left = left ;
    test.root.right = right ;
    test.root.left.right = Lright ;
    test.root.right.left = Rleft ;

    assertEquals(22,test.findMaximaumValue(test.root));
  }
  @Test void testFizzBuzzTree(){
    TreeFizzBuzz treeFizzBuzz = new TreeFizzBuzz();
//    assertEquals("1 \n" +
//      "2 \n" +
//      "Fizz \n" +
//      "4 \n" +
//      "\n",treeFizzBuzz.fizzBuzzTree(5));
    assertNotNull(treeFizzBuzz.fizzBuzzTree(5));
  }
}
